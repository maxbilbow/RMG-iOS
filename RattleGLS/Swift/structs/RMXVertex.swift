//
//  RMXVertex.swift
//  RattleGLES
//
//  Created by Max Bilbow on 26/03/2015.
//  Copyright (c) 2015 Rattle Media Ltd. All rights reserved.
//
/*
import Foundation
import GLKit

*/

extension RMX {
     struct Vertex {

        
        var position, color, texCoord, normal: [Float32]
        var verts: [[Float]]
        
        init(_ pos: [Float], _ col: [Float], _ tex: [Float], _ norm: [Float]){
            self.position = pos
            self.color = col
            self.texCoord = tex
            self.normal = norm
        }
        
        init(_ verts: [[Floar]]){
            self.verts = verts
        }
    
        
        
        struct Position {
            var x, y, z: Int32
        }
        
    
        
        
        static let Sphere: [Vertex] = [
            // Front
            Vertex([1, -1, 1],    [1, 0, 0, 1], [0, 1],               [0, 0, 1]),
            Vertex([1, 1, 1],     [0, 1, 0, 1], [0, 2.0/3.0],         [0, 0, 1]),
            Vertex([-1, 1, 1],    [0, 0, 1, 1], [1.0/3.0, 2.0/3.0],   [0, 0, 1]),
            Vertex([-1, -1, 1],   [0, 0, 0, 1], [1.0/3.0, 1],         [0, 0, 1]),
            // Back
        ]
 
        static let Cube: [Vertex] = [
            // Front
            Vertex([1, -1, 1],    [1, 0, 0, 1], [0, 1],               [0, 0, 1]),
            Vertex([1, 1, 1],     [0, 1, 0, 1], [0, 2.0/3.0],         [0, 0, 1]),
            Vertex([-1, 1, 1],    [0, 0, 1, 1], [1.0/3.0, 2.0/3.0],   [0, 0, 1]),
            Vertex([-1, -1, 1],   [0, 0, 0, 1], [1.0/3.0, 1],         [0, 0, 1]),
            // Back
            Vertex([1, 1, -1],    [1, 0, 0, 1], [1.0/3.0, 1],         [0, 0, -1]),
            Vertex([1, -1, -1],   [0, 0, 1, 1], [1.0/3.0, 2.0/3.0],   [0, 0, -1]),
            Vertex([-1, -1, -1],  [0, 1, 0, 1], [2.0/3.0, 2.0/3.0],   [0, 0, -1]),
            Vertex([-1, 1, -1],   [0, 0, 0, 1], [2.0/3.0, 1],         [0, 0, -1]),
            // Left
            Vertex([-1, -1, 1],   [1, 0, 0, 1], [2.0/3.0, 1],         [-1, 0, 0]),
            Vertex([-1, 1, 1],    [0, 1, 0, 1], [2.0/3.0, 2.0/3.0],   [-1, 0, 0]),
            Vertex([-1, 1, -1],   [0, 0, 1, 1], [1, 2.0/3.0],         [-1, 0, 0]),
            Vertex([-1, -1, -1],  [0, 0, 0, 1], [1, 1],               [-1, 0, 0]),
            // Right
            Vertex([1, -1, -1],   [1, 0, 0, 1], [0, 2.0/3.0],         [1, 0, 0]),
            Vertex([1, 1, -1],    [0, 1, 0, 1], [0, 1.0/3.0],         [1, 0, 0]),
            Vertex([1, 1, 1],     [0, 0, 1, 1], [1.0/3.0, 1.0/3.0],   [1, 0, 0]),
            Vertex([1, -1, 1],    [0, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [1, 0, 0]),
            // Top
            Vertex([1, 1, 1],     [1, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [0, 1, 0]),
            Vertex([1, 1, -1],    [0, 1, 0, 1], [1.0/3.0, 1.0/3.0],   [0, 1, 0]),
            Vertex([-1, 1, -1],   [0, 0, 1, 1], [2.0/3.0, 1.0/3.0],   [0, 1, 0]),
            Vertex([-1, 1, 1],    [0, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, 1, 0]),
            // Bottom
            Vertex([1, -1, -1],   [1, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, -1, 0]),
            Vertex([1, -1, 1],    [0, 1, 0, 1], [2.0/3.0, 1.0/3.0],   [0, -1, 0]),
            Vertex([-1, -1, 1],   [0, 0, 1, 1], [1, 1.0/3.0],         [0, -1, 0]),
            Vertex([-1, -1, -1],  [0, 0, 0, 1], [1, 2.0/3.0],         [0, -1, 0])
        ]
       
        static let Plane: [Vertex] = [
            // Top
            Vertex([1, 0, 1],     [1, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [0, 1, 0]),
            Vertex([1, 0, -1],    [0, 1, 0, 1], [1.0/3.0, 1.0/3.0],   [0, 1, 0]),
            Vertex([-1, 0, -1],   [0, 0, 1, 1], [2.0/3.0, 1.0/3.0],   [0, 1, 0]),
            Vertex([-1, 0, 1],    [0, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, 1, 0]),
            // Bottom
            Vertex([1, 0, 1],     [1, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [0, -1, 0]),
            Vertex([1, 0, -1],    [0, 1, 0, 1], [1.0/3.0, 1.0/3.0],   [0, -1, 0]),
            Vertex([-1, 0, -1],   [0, 0, 1, 1], [2.0/3.0, 1.0/3.0],   [0, -1, 0]),
            Vertex([-1, 0, 1],    [0, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, -1, 0])
        ]


    
        static let IndicesTrianglesSphere: [GLubyte] = [
            // Front
            0, 1, 2,
            2, 3, 0,
        ]
        /**
        Vertex for cube
        */

        static let IndicesTrianglesCube: [GLubyte] = [
            // Front
            0, 1, 2,
            2, 3, 0,
            // Back
            4, 6, 5,
            4, 6, 7,
            // Left
            8, 9, 10,
            10, 11, 8,
            // Right
            12, 13, 14,
            14, 15, 12,
            // Top
            16, 17, 18,
            18, 19, 16,
            // Bottom
            20, 21, 22,
            22, 23, 20
        ];

        ///Plane




        static let IndicesTrianglesPlane: [GLubyte] = [
            // Top
            0, 1, 2,
            2, 3, 0,
            // Bottom
            4, 6, 5,
            4, 6, 7,
        ]
    }
    
}


/*

typealias Vertex = RMX.Vertex
 let Sphere: [RMX.Vertex] = [
    // Front
    Vertex([1, -1, 1],    [1, 0, 0, 1], [0, 1],               [0, 0, 1]),
    Vertex([1, 1, 1],     [0, 1, 0, 1], [0, 2.0/3.0],         [0, 0, 1]),
    Vertex([-1, 1, 1],    [0, 0, 1, 1], [1.0/3.0, 2.0/3.0],   [0, 0, 1]),
    Vertex([-1, -1, 1],   [0, 0, 0, 1], [1.0/3.0, 1],         [0, 0, 1]),
    // Back
]

 let Cube: [RMX.Vertex] = [
    // Front
    Vertex([1, -1, 1],    [1, 0, 0, 1], [0, 1],               [0, 0, 1]),
    Vertex([1, 1, 1],     [0, 1, 0, 1], [0, 2.0/3.0],         [0, 0, 1]),
    Vertex([-1, 1, 1],    [0, 0, 1, 1], [1.0/3.0, 2.0/3.0],   [0, 0, 1]),
    Vertex([-1, -1, 1],   [0, 0, 0, 1], [1.0/3.0, 1],         [0, 0, 1]),
    // Back
    Vertex([1, 1, -1],    [1, 0, 0, 1], [1.0/3.0, 1],         [0, 0, -1]),
    Vertex([1, -1, -1],   [0, 0, 1, 1], [1.0/3.0, 2.0/3.0],   [0, 0, -1]),
    Vertex([-1, -1, -1],  [0, 1, 0, 1], [2.0/3.0, 2.0/3.0],   [0, 0, -1]),
    Vertex([-1, 1, -1],   [0, 0, 0, 1], [2.0/3.0, 1],         [0, 0, -1]),
    // Left
    Vertex([-1, -1, 1],   [1, 0, 0, 1], [2.0/3.0, 1],         [-1, 0, 0]),
    Vertex([-1, 1, 1],    [0, 1, 0, 1], [2.0/3.0, 2.0/3.0],   [-1, 0, 0]),
    Vertex([-1, 1, -1],   [0, 0, 1, 1], [1, 2.0/3.0],         [-1, 0, 0]),
    Vertex([-1, -1, -1],  [0, 0, 0, 1], [1, 1],               [-1, 0, 0]),
    // Right
    Vertex([1, -1, -1],   [1, 0, 0, 1], [0, 2.0/3.0],         [1, 0, 0]),
    Vertex([1, 1, -1],    [0, 1, 0, 1], [0, 1.0/3.0],         [1, 0, 0]),
    Vertex([1, 1, 1],     [0, 0, 1, 1], [1.0/3.0, 1.0/3.0],   [1, 0, 0]),
    Vertex([1, -1, 1],    [0, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [1, 0, 0]),
    // Top
    Vertex([1, 1, 1],     [1, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [0, 1, 0]),
    Vertex([1, 1, -1],    [0, 1, 0, 1], [1.0/3.0, 1.0/3.0],   [0, 1, 0]),
    Vertex([-1, 1, -1],   [0, 0, 1, 1], [2.0/3.0, 1.0/3.0],   [0, 1, 0]),
    Vertex([-1, 1, 1],    [0, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, 1, 0]),
    // Bottom
    Vertex([1, -1, -1],   [1, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, -1, 0]),
    Vertex([1, -1, 1],    [0, 1, 0, 1], [2.0/3.0, 1.0/3.0],   [0, -1, 0]),
    Vertex([-1, -1, 1],   [0, 0, 1, 1], [1, 1.0/3.0],         [0, -1, 0]),
    Vertex([-1, -1, -1],  [0, 0, 0, 1], [1, 2.0/3.0],         [0, -1, 0])
]

 let Plane: [RMX.Vertex] = [
    // Top
    Vertex([1, 0, 1],     [1, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [0, 1, 0]),
    Vertex([1, 0, -1],    [0, 1, 0, 1], [1.0/3.0, 1.0/3.0],   [0, 1, 0]),
    Vertex([-1, 0, -1],   [0, 0, 1, 1], [2.0/3.0, 1.0/3.0],   [0, 1, 0]),
    Vertex([-1, 0, 1],    [0, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, 1, 0]),
    // Bottom
    Vertex([1, 0, 1],     [1, 0, 0, 1], [1.0/3.0, 2.0/3.0],   [0, -1, 0]),
    Vertex([1, 0, -1],    [0, 1, 0, 1], [1.0/3.0, 1.0/3.0],   [0, -1, 0]),
    Vertex([-1, 0, -1],   [0, 0, 1, 1], [2.0/3.0, 1.0/3.0],   [0, -1, 0]),
    Vertex([-1, 0, 1],    [0, 0, 0, 1], [2.0/3.0, 2.0/3.0],   [0, -1, 0])
]



 let IndicesTrianglesSphere: [GLubyte] = [
    // Front
    0, 1, 2,
    2, 3, 0,
]
/**
Vertex for cube
*/

 let IndicesTrianglesCube: [GLubyte] = [
    // Front
    0, 1, 2,
    2, 3, 0,
    // Back
    4, 6, 5,
    4, 6, 7,
    // Left
    8, 9, 10,
    10, 11, 8,
    // Right
    12, 13, 14,
    14, 15, 12,
    // Top
    16, 17, 18,
    18, 19, 16,
    // Bottom
    20, 21, 22,
    22, 23, 20
];

///Plane




 let IndicesTrianglesPlane: [GLubyte] = [
    // Top
    0, 1, 2,
    2, 3, 0,
    // Bottom
    4, 6, 5,
    4, 6, 7,
] */